{
	"components": {
		"schemas": {
			"CaddyService": {
				"description": "CaddyService schema",
				"properties": {
					"block": {
						"items": {
							"properties": {
								"path": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"value": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"content": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"startEnd": {}
				},
				"type": "object"
			},
			"CreateSystemDModel": {
				"description": "CreateSystemDModel schema",
				"properties": {
					"baseDir": {
						"type": "string"
					},
					"execCommand": {
						"type": "string"
					},
					"libDir": {
						"type": "boolean"
					},
					"serviceName": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"CreateSystemDResponseModel": {
				"description": "CreateSystemDResponseModel schema",
				"properties": {
					"createSystemDModel": {
						"properties": {
							"baseDir": {
								"type": "string"
							},
							"execCommand": {
								"type": "string"
							},
							"libDir": {
								"type": "boolean"
							},
							"serviceName": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"createdOrUpdated": {
						"type": "string"
					},
					"serviceFile": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"HTTPError": {
				"description": "HTTPError schema",
				"properties": {
					"detail": {
						"description": "Human readable error message",
						"nullable": true,
						"type": "string"
					},
					"errors": {
						"items": {
							"properties": {
								"more": {
									"additionalProperties": {},
									"type": "object"
								},
								"name": {
									"type": "string"
								},
								"reason": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"nullable": true,
						"type": "array"
					},
					"instance": {
						"nullable": true,
						"type": "string"
					},
					"status": {
						"description": "HTTP status code",
						"example": 403,
						"nullable": true,
						"type": "integer"
					},
					"title": {
						"description": "Short title of the error",
						"nullable": true,
						"type": "string"
					},
					"type": {
						"description": "URL of the error type. Can be used to lookup the error in a documentation",
						"nullable": true,
						"type": "string"
					}
				},
				"type": "object"
			},
			"RequestUpdateCaddyModel": {
				"description": "RequestUpdateCaddyModel schema",
				"properties": {
					"content": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"RunningSystemDServiceResponse": {
				"description": "RunningSystemDServiceResponse schema",
				"properties": {
					"items": {
						"items": {
							"properties": {
								"activeState": {
									"type": "string"
								},
								"loadState": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"subState": {
									"type": "string"
								},
								"unit": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"total": {
						"type": "integer"
					}
				},
				"type": "object"
			},
			"SystemDServiceResponse": {
				"description": "SystemDServiceResponse schema",
				"properties": {
					"items": {
						"items": {
							"properties": {
								"contents": {
									"type": "string"
								},
								"modifiedAt": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"path": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"total": {
						"type": "integer"
					}
				},
				"type": "object"
			},
			"TextToParse": {
				"description": "TextToParse schema",
				"properties": {
					"text": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"UpdateCaddyModel": {
				"description": "UpdateCaddyModel schema",
				"properties": {
					"content": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"UpdateCaddyResponse": {
				"description": "UpdateCaddyResponse schema",
				"properties": {
					"content": {
						"type": "string"
					},
					"contentArray": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"contentArrayBefore": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"updatedBlock": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Welcome": {
				"description": "Welcome schema",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"string": {
				"description": "string schema",
				"type": "string"
			},
			"unknown-interface": {
				"description": "unknown-interface schema"
			}
		}
	},
	"info": {
		"description": "\nThis is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.\n\nBelow is a Fuego Cheatsheet to help you get started. Don't hesitate to check the [Fuego documentation](https://go-fuego.dev) for more details.\n\nHappy coding! ðŸ”¥\n\n## Usage\n\n### Route registration\n\n```go\nfunc main() {\n\t// Create a new server\n\ts := fuego.NewServer()\n\n\t// Register some routes\n\tfuego.Post(s, \"/hello\", myController)\n\tfuego.Get(s, \"/myPath\", otherController)\n\tfuego.Put(s, \"/hello\", thirdController)\n\n\tadminRoutes := fuego.Group(s, \"/admin\")\n\tfuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/*, \n\tfuego.Get(adminRoutes, \"/hello\", groupController) // This route will be available at /admin/hello\n\n\t// Start the server\n\ts.Start()\n}\n```\n\n### Basic controller\n\n```go\ntype MyBody struct {\n\tName string `json:\"name\" validate:\"required,max=30\"`\n}\n\ntype MyResponse struct {\n\tAnswer string `json:\"answer\"`\n}\n\nfunc hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {\n\tbody, err := ctx.Body()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn \u0026MyResponse{Answer: \"Hello \" + body.Name}, nil\n}\n```\n\n### Add openAPI information to the route\n\n```go\nimport (\n\t\"github.com/go-fuego/fuego\"\n\t\"github.com/go-fuego/fuego/option\"\n\t\"github.com/go-fuego/fuego/param\"\n)\n\nfunc main() {\n\ts := fuego.NewServer()\n\n\t// Custom OpenAPI options\n\tfuego.Post(s, \"/\", myController\n\t\toption.Description(\"This route does something...\"),\n\t\toption.Summary(\"This is my summary\"),\n\t\toption.Tags(\"MyTag\"), // A tag is set by default according to the return type (can be deactivated)\n\t\toption.Deprecated(), // Marks the route as deprecated in the OpenAPI spec\n\n\t\toption.Query(\"name\", \"Declares a query parameter with default value\", param.Default(\"Carmack\")),\n\t\toption.Header(\"Authorization\", \"Bearer token\", param.Required()),\n\t\toptionPagination,\n\t\toptionCustomBehavior,\n\t)\n\n\ts.Run()\n}\n\nvar optionPagination = option.Group(\n\toption.QueryInt(\"page\", \"Page number\", param.Default(1), param.Example(\"1st page\", 1), param.Example(\"42nd page\", 42)),\n\toption.QueryInt(\"perPage\", \"Number of items per page\"),\n)\n\nvar optionCustomBehavior = func(r *fuego.BaseRoute) {\n\tr.XXX = \"YYY\"\n}\n```\n\nThen, in the controller\n\n```go\ntype MyResponse struct {\n\tAnswer string `json:\"answer\"`\n}\n\nfunc getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {\n\tname := ctx.QueryParam(\"name\")\n\tperPage, _ := ctx.QueryParamIntErr(\"per_page\")\n\n\treturn \u0026MyResponse{Answer: \"Hello \" + name}, nil\n}\n```\n",
		"title": "OpenAPI",
		"version": "0.0.1"
	},
	"openapi": "3.1.0",
	"paths": {
		"/": {
			"get": {
				"description": "#### Controller: \n\n`main.main.func1`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "GET_/",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Welcome"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Welcome"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "func1"
			}
		},
		"/caddre": {
			"get": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.GetCaddyController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "GET_/caddre",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CaddyService"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CaddyService"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get caddy controller"
			}
		},
		"/caddy/": {
			"get": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.GetCaddyController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n- `github.com/tigawanna/cloud-mwitu/internal/middleware.CorsMiddleware`\n\n---\n\n",
				"operationId": "GET_/caddy/",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CaddyService"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CaddyService"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get caddy controller",
				"tags": [
					"caddy"
				]
			},
			"post": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.RequestUpdateCaddyController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n- `github.com/tigawanna/cloud-mwitu/internal/middleware.CorsMiddleware`\n\n---\n\n",
				"operationId": "POST_/caddy/",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/RequestUpdateCaddyModel"
							}
						}
					},
					"description": "Request body for routes.RequestUpdateCaddyModel",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateCaddyResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/UpdateCaddyResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "request update caddy controller",
				"tags": [
					"caddy"
				]
			}
		},
		"/caddy/confirm-update": {
			"post": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.UpdateCaddyController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n- `github.com/tigawanna/cloud-mwitu/internal/middleware.CorsMiddleware`\n\n---\n\n",
				"operationId": "POST_/caddy/confirm-update",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/UpdateCaddyModel"
							}
						}
					},
					"description": "Request body for routes.UpdateCaddyModel",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateCaddyResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/UpdateCaddyResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "update caddy controller",
				"tags": [
					"caddy"
				]
			}
		},
		"/parser/": {
			"post": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.ParseStringController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "POST_/parser/",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/TextToParse"
							}
						}
					},
					"description": "Request body for routes.TextToParse",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/string"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/string"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "parse string controller",
				"tags": [
					"parser"
				]
			}
		},
		"/sytemd/": {
			"get": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.GetSystemDController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "GET_/sytemd/",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SystemDServiceResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/SystemDServiceResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get system d controller",
				"tags": [
					"sytemd"
				]
			},
			"post": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.MakeSystemDController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "POST_/sytemd/",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/CreateSystemDModel"
							}
						}
					},
					"description": "Request body for routes.CreateSystemDModel",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateSystemDResponseModel"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/CreateSystemDResponseModel"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "make system d controller",
				"tags": [
					"sytemd"
				]
			}
		},
		"/sytemd/running": {
			"get": {
				"description": "#### Controller: \n\n`github.com/tigawanna/cloud-mwitu/internal/api/routes.GetRunningSystemDController`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "GET_/sytemd/running",
				"parameters": [
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RunningSystemDServiceResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/RunningSystemDServiceResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get running system d controller",
				"tags": [
					"sytemd"
				]
			}
		}
	},
	"servers": [
		{
			"description": "local server",
			"url": "http://localhost:8080"
		}
	],
	"tags": [
		{
			"name": "caddy"
		},
		{
			"name": "parser"
		},
		{
			"name": "sytemd"
		}
	]
}